---
// Esto es una interfaz de TypeScript donde estamos definiendo qué debe contener el objeto por defecto
// Props, así como el tipo de datos que tiene que ser cada cosa.
export interface Props {
	logo?: string;
	brand: string;
	links: Array<{ text: string; href: string }>; // Aquí estamos diciendo que queremos un Array
	// de objetos, cada objeto con 2 propiedades (text y href)
	colorPrincipal?: string;
	colorSecundario?: string;
}

// Destructurar el objeto Props que nos pasa Astro por defecto a este componente y
// sacar las propiedades logo, bran y links si existen.
const {
	logo,
	brand,
	links,
	colorPrincipal = "lightgreen",
	colorSecundario = "violet",
} = Astro.props;

// Astro sabe en todo momento cual es la url, con pathname le pedimos que nos de el path
// de la url, ignorando el servidor, dominio y puerto, así podemos compararlo con los enlaces.
const currentPath = Astro.url.pathname;
---

<nav class="navbar">
	<div class="navbar-container">
		<!-- Imagen de marca, logo y brand -->
		<div class="navbar-brand">
			<!-- Si nos han pasado un logo, esta expresión será cierta
			 	y la imagen se insertará en la barra de navegación, si no, pues no.
			 -->
			{logo && <img src={logo} alt="" class="navbar-logo" />}
			<a href="/" class="brand-text">{brand.toLocaleUpperCase()}</a>
		</div>

		<!-- Cosas para el movil -->
		<button class="mobile-toggle" aria-expanded="false">
			<!-- Con el atributo aria-expanded creado por nosotros controlaremos el estilo del 'botón' -->
			<span class="hamburger-line"></span>
			<span class="hamburger-line"></span>
			<span class="hamburger-line"></span>
		</button>

		<!-- Enlaces del menú de navegación -->
		<div class="navbar-menu">
			<ul class="navbar-nav">
				<!--
					Utilizamos el Array de links para crear un nuevo Array con map, generando un li
					con un a por cada objeto de la lista, con su texto y href. Comparamos href con el
					path actual para determinar si añadir la clase 'active' o no a la lista de clases
					del enlace y, de esa manera, poder resaltar la página actual en el menú de navegación.
				 -->
				{
					links.map((link) => {
						return (
							<li class="navbar-item">
								<a
									href={link.href}
									class={`nav-link ${link.href === currentPath ? "active" : ""}`}
								>
									{link.text}
								</a>
							</li>
						);
					})
				}
			</ul>
		</div>
	</div>
</nav>

<!-- define:vars nos permite pasarle valores de variables desde el frontmatter hasta nuestros estilos -->
<style define:vars={{ colorPrincipal, colorSecundario }}>
	.navbar {
		background: linear-gradient(
			135deg,
			var(--colorPrincipal) 0%,
			var(--colorSecundario) 100%
		);
		box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
		position: sticky;
		top: 0;
		z-index: 1000;
		backdrop-filter: blur(10px);
	}

	.navbar-container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 0 1rem;
		display: flex;
		align-items: center;
		justify-content: space-between;
		height: 4rem;
	}

	.navbar-brand {
		display: flex;
		align-items: center;
		gap: 0.75rem;
	}

	.navbar-logo {
		height: 2rem;
		width: auto;
		border-radius: 4px;
	}

	.brand-text {
		font-size: 1.5rem;
		font-weight: 700;
		color: white;
		text-decoration: none;
		letter-spacing: -0.025rem;
		transition: opacity 0.2s ease;
	}

	.brand-text:hover {
		opacity: 0.5;
	}

	.mobile-toggle {
		display: none;
		flex-direction: column;
		background: none;
		border: none;
		cursor: pointer;
		padding: 0.5rem;
		gap: 0.25rem;
		transition: transform 0.2s ease;
	}

	.mobile-toggle:hover {
		transform: scale(1.1);
	}

	.hamburger-line {
		width: 1.5rem;
		height: 2px;
		background: white;
		border-radius: 1px;
		transition: all 0.3s ease;
	}

	.navbar-menu {
		display: flex;
		padding-right: 1.5rem;
	}

	.navbar-nav {
		display: flex;
		list-style: none;
		margin: 0;
		padding: 0;
		gap: 2rem;
	}

	.nav-item {
		position: relative;
	}

	.nav-link {
		color: rgba(255, 255, 255, 0.7);
		text-decoration: none;
		padding: 0.5rem 1rem;
		border-radius: 6px;
		font-weight: 500;
		transition: all 0.2 ease;
		position: relative;
		overflow: hidden;
	}

	.nav-link:hover {
		color: white;
		background: rgba(255, 255, 255, 0.1);
		transform: translateY(-1px);
	}

	.nav-link.active {
		color: white;
		background: rgba(255, 255, 255, 0.2);
		box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
	}

	.nav-link.active::before {
		content: "";
		position: absolute;
		bottom: 0;
		left: 50%;
		width: 70%;
		transform: translateX(-50%);
		height: 2px;
		background: white;
		border: 1px;
	}

	/* Estilos para móvil */
	@media (max-width: 768px) {
		.mobile-toggle {
			display: flex;
		}

		.navbar-menu {
			position: absolute;
			top: 100%;
			left: 0;
			right: 0;
			background: linear-gradient(
				135deg,
				var(--colorPrincipal) 0%,
				var(--colorSecundario) 100%
			);
			backdrop-filter: blur(10px);
			border-top: 1px solid rgba(255, 255, 255, 0.3);
			opacity: 0;
			visibility: hidden;
			transform: translateY(-10px);
			transition: all 0.3s ease;
		}

		/**Esta es la parte más importante de la versión móvil
			Lo que dice es que, cuando .navbar-menu tiene además la clase .active, entonces la opacidad
			será 1 y la visibilidad 
		*/
		.navbar-menu.active {
			opacity: 1;
			visibility: visible;
			transform: translateY(0);
		}

		.navbar-nav {
			flex-direction: column;
			gap: 0;
			padding: 1rem;
		}

		.nav-link {
			display: block;
			padding: 0.75rem 1rem;
			border-radius: 6px;
			margin-bottom: 0.25rem;
		}

		.nav-link.active::before {
			display: none;
		}

		.nav-link.active {
			background: rgba(255, 255, 255, 0.2);
		}

		/* Animar la hamburguesa
			La manera en que funciona es que utilizo el atributo custom 'aria-expanded' para atacar
			directamente a los hijos del 'mobile-toggle', usando un selector encadenado con la clase de los
			hijos y luego el pseudoselector nth-child para elegir al primer, segundo y tercer hijo.
			El primer hijo le aplico una rotación de 45 grados
		*/
		.mobile-toggle[aria-expanded="true"] .hamburger-line:nth-child(1) {
			transform: rotate(45deg) translate(0.375rem, 0.375rem);
		}

		.mobile-toggle[aria-expanded="true"] .hamburger-line:nth-child(2) {
			opacity: 0;
		}

		.mobile-toggle[aria-expanded="true"] .hamburger-line:nth-child(3) {
			transform: rotate(-45deg) translate(0.375rem, -0.375rem);
		}
	}

	/* La animación guay */
	.navbar {
		/* Asigno la animación por nombre y establezco el tipo de curva y el tiempo de duración */
		animation: slideDown 0.5s ease-out;
	}

	/*
		Defino la animación, dándole un nombre y estableciendo el estado de inicio y el de final.
		En este caso empezará completamente fuera de la vista y transparente y acabará en su posición
		natural y completamente opaca.
	 */
	@keyframes slideDown {
		from {
			transform: translateY(-100%);
			opacity: 0;
		}
		to {
			transform: translateY(0);
			opacity: 1;
		}
	}
</style>

<script>
	// Coger los toggles y el menú para poder referenciarlos desde nuestros listeners
	const mobileToggle = document.querySelector(".mobile-toggle");
	const navbarMenu = document.querySelector(".navbar-menu");

	// Para evitar errores, verifico que he encontrado tanto el botón de togle
	// como el menú de navegación
	if (mobileToggle && navbarMenu) {
		// Este event listener espera un click sobre el botón de toggle
		mobileToggle.addEventListener("click", () => {
			// Booleano que conseguimos tras comparar el valor del atributo cusom 'aria-expanded'
			// con "true". Luego lo invertiremos, y lo convertiremos a string para guardarlo de nuevo
			// en este atributo custom. Por último haremos un toggle (si está, la quito, si no, la pongo)
			// sobre la clase 'active', en la lista de clases del bloque de navegación.
			const estaExpanded =
				mobileToggle.getAttribute("aria-expanded") === "true";

			mobileToggle.setAttribute(
				"aria-expanded",
				(!estaExpanded).toString(),
			);
			navbarMenu.classList.toggle("active");
		});

		// Quiero cerrarlo al hacer click fuera
		document.addEventListener("click", (e) => {
			if (
				// Aquí verificaré que el usuario NO haya hecho click en el botón del menú
				// o en el menú en sí. Si estas dos condiciones se cumplen, entonces desactivaré el menú
				!mobileToggle.contains(e.target as Node) &&
				!navbarMenu.contains(e.target as Node)
			) {
				mobileToggle.setAttribute("aria-expanded", "false");
				navbarMenu.classList.remove("active");
			}
		});

		document.addEventListener("keydown", (e) => {
			// Escucho el que se presione la tecla de Esc para desactivar el menú
			if (e.key === "Escape") {
				mobileToggle.setAttribute("aria-expanded", "false");
				navbarMenu.classList.remove("active");
			}
		});
	}
</script>
